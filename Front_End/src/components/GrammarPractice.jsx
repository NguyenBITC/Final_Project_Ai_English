import React, { useEffect, useState } from "react";
import { GoogleGenerativeAI } from "@google/generative-ai";

const GrammarPractice = () => {
  const [questions, setQuestions] = useState([]); // Danh s√°ch c√¢u h·ªèi
  const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  const [error, setError] = useState(null); // L·ªói n·∫øu c√≥
  const [userLevel, setUserLevel] = useState(null); // Tr√¨nh ƒë·ªô ng∆∞·ªùi d√πng
  const [answers, setAnswers] = useState({}); // ƒê√°p √°n ng∆∞·ªùi d√πng ch·ªçn
  const [submitted, setSubmitted] = useState(false); // Tr·∫°ng th√°i ƒë√£ n·ªôp b√†i hay ch∆∞a

  const [questionCount, setQuestionCount] = useState(5); // S·ªë c√¢u h·ªèi mu·ªën l√†m
  const [selectedTypes, setSelectedTypes] = useState(["multiple_choice"]); // D·∫°ng b√†i t·∫≠p ƒë∆∞·ª£c ch·ªçn

  useEffect(() => {
    const userInfo = localStorage.getItem("userInfo");
    const level = JSON.parse(userInfo)?.user.level;
    setUserLevel(level);
  }, []);

  const getData = async () => {
    try {
      if (!userLevel) return;
      setLoading(true);
      setError(null);

      const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      // Gh√©p d·∫°ng b√†i t·∫≠p th√†nh chu·ªói
      const typeDescriptions = selectedTypes
        .map((type) => {
          switch (type) {
            case "multiple_choice":
              return "Tr·∫Øc nghi·ªám (multiple_choice)";
            case "fill_blank":
              return "ƒêi·ªÅn t·ª´ v√†o ch·ªó tr·ªëng (fill_blank)";
            case "dropdown":
              return "Ch·ªçn ƒë√°p √°n t·ª´ danh s√°ch (dropdown)";
            case "rewrite":
              return "Vi·∫øt l·∫°i c√¢u (rewrite)";
            case "error_identify":
              return "T√¨m l·ªói sai (error_identify)";
            case "reading":
              return "ƒê·ªçc hi·ªÉu (reading)";
            default:
              return "";
          }
        })
        .join("\n   - ");

      const prompt = `B·∫°n l√† m·ªôt gi√°o vi√™n ti·∫øng Anh th√¥ng minh. H√£y t·∫°o ra ${questionCount} c√¢u h·ªèi ng·ªØ ph√°p ƒëa d·∫°ng ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô h·ªçc vi√™n l√† ${userLevel} (A1‚ÄìC1), theo c√°c y√™u c·∫ßu sau:

1. Ch·ªâ s·ª≠ d·ª•ng ki·∫øn th·ª©c ng·ªØ ph√°p ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô ${userLevel}, kh√¥ng qu√° d·ªÖ, kh√¥ng qu√° kh√≥.
2. Ch·ªâ bao g·ªìm c√°c d·∫°ng b√†i t·∫≠p sau:
   - ${typeDescriptions}
3. M·ªói c√¢u h·ªèi c·∫ßn c√≥:
   - id
   - type
   - question
   - question_hint
   - options:  (d·∫°ng A, B, C, D)
   - correct_answer (d·∫°ng A, B, C, D)
   - explanation
4. C√°c t√¨nh hu·ªëng th·ª±c t·∫ø: ƒë·ªùi s·ªëng, c√¥ng vi·ªác, h·ªçc t·∫≠p, s·ªü th√≠ch...
5. S·ª≠ d·ª•ng ti·∫øng Anh t·ª± nhi√™n, kh√¥ng d√πng ti·∫øng m·∫π ƒë·∫ª.
6. Tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON.
`;

      const response = await model.generateContent(prompt);
      if (!response || !response.response)
        throw new Error("Invalid API response");

      const responseText = response.response.text();
      const jsonStart = responseText.indexOf("[");
      const jsonEnd = responseText.lastIndexOf("]") + 1;
      const jsonData = JSON.parse(responseText.slice(jsonStart, jsonEnd));

      setQuestions(jsonData);
      setAnswers({});
      setSubmitted(false);
    } catch (err) {
      console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  const handleAnswerSelection = (questionId, answer) => {
    setAnswers((prev) => ({ ...prev, [questionId]: answer }));
  };

  const handleSubmit = () => {
    const allAnswered = questions.every((q) => answers[q.id]);
    if (!allAnswered) {
      alert("Vui l√≤ng tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi tr∆∞·ªõc khi n·ªôp b√†i.");
      return;
    }
    setSubmitted(true);
    // TODO: G·ª≠i k·∫øt qu·∫£ l√™n server n·∫øu c·∫ßn thi·∫øt
  };
  const handleReset = () => {
    setAnswers({});
    setSubmitted(false);
  };
  const handleRetry = () => {
    getData();
  };

  const handleCheckboxChange = (type) => {
    setSelectedTypes((prev) =>
      prev.includes(type) ? prev.filter((t) => t !== type) : [...prev, type]
    );
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <h1 className="text-3xl font-bold text-center text-gray-800 mb-4">
        Luy·ªán T·∫≠p Ng·ªØ Ph√°p Theo Tr√¨nh ƒê·ªô ({userLevel || "..."})
      </h1>

      <div className="bg-white p-4 rounded shadow mb-6 max-w-2xl mx-auto">
        <label className="block mb-2 font-semibold">S·ªë c√¢u h·ªèi mu·ªën l√†m:</label>
        <input
          type="number"
          className="border p-2 rounded w-full mb-4"
          min={1}
          max={20}
          value={questionCount}
          onChange={(e) => setQuestionCount(Number(e.target.value))}
        />

        <label className="block mb-2 font-semibold">Ch·ªçn d·∫°ng b√†i t·∫≠p:</label>
        <div className="flex flex-col gap-2">
          <label>
            <input
              type="checkbox"
              checked={selectedTypes.includes("rewrite")}
              onChange={() => handleCheckboxChange("rewrite")}
            />{" "}
            ‚úèÔ∏è Vi·∫øt l·∫°i c√¢u
          </label>
          <label>
            <input
              type="checkbox"
              checked={selectedTypes.includes("error_identify")}
              onChange={() => handleCheckboxChange("error_identify")}
            />{" "}
            ‚ùå T√¨m l·ªói sai
          </label>
          <label>
            <input
              type="checkbox"
              checked={selectedTypes.includes("fill_blank")}
              onChange={() => handleCheckboxChange("fill_blank")}
            />{" "}
            üî≤ ƒêi·ªÅn v√†o ch·ªó tr·ªëng
          </label>
          <label>
            <input
              type="checkbox"
              checked={selectedTypes.includes("multiple_choice")}
              onChange={() => handleCheckboxChange("multiple_choice")}
            />{" "}
            ‚úÖ Tr·∫Øc nghi·ªám
          </label>
          <label>
            <input
              type="checkbox"
              checked={selectedTypes.includes("dropdown")}
              onChange={() => handleCheckboxChange("dropdown")}
            />{" "}
            üìÇ Ch·ªçn t·ª´ danh s√°ch
          </label>
          <label>
            <input
              type="checkbox"
              checked={selectedTypes.includes("reading")}
              onChange={() => handleCheckboxChange("reading")}
            />{" "}
            üìñ ƒê·ªçc hi·ªÉu
          </label>
        </div>

        <button
          onClick={getData}
          className="mt-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600"
        >
          B·∫Øt ƒë·∫ßu l√†m b√†i
        </button>
      </div>

      {loading && (
        <p className="text-center text-gray-600">ƒêang t·∫£i c√¢u h·ªèi...</p>
      )}
      {error && <p className="text-center text-red-600">{error}</p>}

      {questions.length > 0 && (
        <div className="bg-white p-6 rounded-lg shadow-lg max-w-2xl mx-auto">
          {questions.map((q, index) => (
            <div key={q.id} className="mb-6">
              <h2 className="text-lg font-bold mb-2">
                C√¢u {index + 1}: {q.question}
              </h2>
              <p className="text-sm italic text-gray-500 mb-2">
                {q.type.replace("_", " ")} | {q.question_hint}
              </p>

              {q.type === "multiple_choice" && q.options ? (
                <div className="flex flex-col gap-2">
                  {Object.entries(q.options).map(([key, value]) => (
                    <button
                      key={key}
                      onClick={() => handleAnswerSelection(q.id, key)}
                      disabled={submitted}
                      className={`py-2 px-4 rounded text-left transition-all duration-200 ${
                        answers[q.id] === key
                          ? "bg-blue-500 text-white"
                          : "bg-gray-200 hover:bg-blue-400"
                      }`}
                    >
                      <strong>{key}.</strong> {value}
                    </button>
                  ))}
                </div>
              ) : q.type === "dropdown" && q.options ? (
                <select
                  disabled={submitted}
                  onChange={(e) => handleAnswerSelection(q.id, e.target.value)}
                  className="w-full p-2 border rounded mt-2"
                  value={answers[q.id] || ""}
                >
                  <option value="" disabled>
                    Ch·ªçn ƒë√°p √°n
                  </option>
                  {Object.entries(q.options).map(([key, value]) => (
                    <option key={key} value={key}>
                      {key}. {value}
                    </option>
                  ))}
                </select>
              ) : (
                <textarea
                  disabled={submitted}
                  className="w-full p-2 border rounded mt-2"
                  rows={3}
                  onChange={(e) => handleAnswerSelection(q.id, e.target.value)}
                  placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n t·∫°i ƒë√¢y..."
                />
              )}

              {submitted && (
                <div className="mt-4 p-4 border rounded-lg bg-gray-50 shadow-sm">
                  <p className="mb-2">
                    <strong>ƒê√°p √°n b·∫°n ch·ªçn:</strong>{" "}
                    <span
                      className={`font-bold ${
                        answers[q.id] === q.correct_answer
                          ? "text-green-600"
                          : "text-red-600"
                      }`}
                    >
                      {answers[q.id] || "Ch∆∞a ch·ªçn"}
                    </span>
                  </p>
                  <p className="mb-2">
                    <strong>ƒê√°p √°n ƒë√∫ng:</strong>{" "}
                    <span className="font-bold text-blue-600">
                      {q.correct_answer}
                    </span>
                  </p>
                  <p className="mb-2">
                    <strong>Gi·∫£i th√≠ch:</strong> {q.explanation}
                  </p>
                  <p
                    className={`font-semibold ${
                      answers[q.id] === q.correct_answer
                        ? "text-green-600"
                        : "text-red-600"
                    }`}
                  >
                    {answers[q.id] === q.correct_answer
                      ? "‚úÖ B·∫°n ƒë√£ ch·ªçn ƒë√∫ng!"
                      : "‚ùå B·∫°n ƒë√£ ch·ªçn sai!"}
                  </p>
                </div>
              )}
            </div>
          ))}

          <div className="mt-6 flex space-x-4">
            {!submitted ? (
              <button
                onClick={handleSubmit}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
              >
                N·ªôp b√†i
              </button>
            ) : (
              <button
                onClick={handleReset}
                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
              >
                L√†m l·∫°i
              </button>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default GrammarPractice;
